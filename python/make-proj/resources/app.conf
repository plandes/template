#set ($d = "$")
[cli]
class_name = zensols.cli.ActionCliManager
apps = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli, app
cleanups = list: pkg_cli, log_cli, config_cli, list_actions_cli, export_env_cli,
	 app_decorator, app, cli, package
default_action = doit

[log_cli]
class_name = zensols.cli.LogConfigurator
log_name = ${d}{package:name}
#config_file = resource: resources/log.conf
format = %%(asctime)-15s %%(message)s
#format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
#default_level = debug
#default_app_level = warn

# for multi-process apps, uncomment and remove the log_cli cleanup
#[multiprocess_log_config]
#section = log_cli

[pkg_cli]
class_name = zensols.cli.PackageInfoImporter

[config_cli]
class_name = zensols.cli.ConfigurationImporter
type = import
section = config_import

[import]
sections = list: imp_env

[imp_env]
type = environment
section_name = env
includes = set: GITUSER

[config_import]
sections = list: config_imp_obj

[config_imp_obj]
type = ini
config_files = list: ^{config_path}, resource: resources/obj.conf

[list_actions_cli]
class_name = zensols.cli.ListActions

[export_env_cli]
class_name = zensols.cli.ExportEnvironment
section = export_vars

[app]
class_name = ${namespace}.${appclass}
an_inst = instance: some_inst

[app_decorator]
class_name = zensols.cli.ActionCli
option_overrides = dict: {'out_dir': {'metavar': 'DIR'}}
option_excludes = set: an_inst
