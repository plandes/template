#set ($d = "$")
[cli]
# the list of applications to invoke on start up
apps = list: ${d}{cli_config_default:apps}, export_env_cli, app, papp
# declare sections to remove
cleanups = list: ${d}{cli_config_default:cleanups}, export_env_cli, app, papp, app_decorator
# there are needed to print the configuration: package
# set the default actions
default_action = doit
# configure the help usage formatting
usage_config = object({'param':
    {'max_first_col': 0.4, 'max_metavar_len': 0.2}}):
    zensols.cli.UsageConfig

#[log_cli]
#config_file = resource: resources/log.conf
#format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
#default_level = debug
#default_app_level = warn

# for multi-process apps, uncomment and remove the log_cli cleanup
#[multiprocess_log_config]
#section = log_cli

[import]
sections = list: imp_env
config_files = list:
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf

# configuration files are optional
[config_cli]
expect = False

[config_import]
# the test configuration file needs interpolates the following sections
references = list: app, package, env

[config_imp]
# source the config file for forward propogating option interpolation; then
# source the object factory sections, finally source the configuration file
# again for any section overwrites
config_files = list: 
    ^{config_path},
    resource: resources/obj.conf,
    ^{config_path}

[imp_env]
type = environment
section_name = env
includes = set: GITUSER

[export_env_cli]
class_name = zensols.cli.ExportEnvironment
section = export_vars

[app]
class_name = ${namespace}.${appclass}
an_inst = instance: some_inst

[app_decorator]
option_overrides = dict: {'out_dir': {'metavar': 'DIR'}}
option_excludes = set: an_inst

[papp]
class_name = ${namespace}.PrototypeApplication
app = instance: app
